{"version":3,"file":"main.95b826389862d0c34362.hot-update.js","sources":["C:/Me/Web Development/sbuttons/website/src/pages/Examples/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react' \r\nimport Common from '../Common'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport SidebarLink from '../../components/SidebarLink'\r\nimport buttons from '../../data/buttons.json'\r\nimport ButtonExample from '../../components/ButtonExample'\r\n\r\nfunction Examples () {\r\n    const [currentButton, setCurrentButton] = useState(null)\r\n\r\n    useEffect(() => {\r\n        //todo set currentbutton intial value\r\n        if (window.location.hash) {\r\n            setCurrentButton(window.location.hash)\r\n        } else {\r\n            if (buttons.length) {\r\n                //set the first button as current button\r\n                if (buttons[0].children.length) {\r\n                    setCurrentButton('#' + buttons[0].children[0].type)\r\n                } else {\r\n                    setCurrentButton('#' + buttons[0].type)\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    let button = null\r\n    if (currentButton) {\r\n        const type = currentButton.replace(\"#\", \"\")\r\n        buttons.some((buttonType) => {\r\n            if (buttonType.type === type) {\r\n                button = {\r\n                    button: {\r\n                        label: buttonType.label,\r\n                        classes: buttonType.classes,\r\n                        variations: buttonType.variations ? buttonType.variations : []\r\n                    },\r\n                    type: {\r\n                        name: buttonType.label,\r\n                        shouldHaveRoundedType: buttonType.shouldHaveRoundedType !== undefined ? buttonType.shouldHaveRoundedType : true,\r\n                        shouldHaveBlockType: buttonType.shouldHaveBlockType !== undefined ? buttonType.shouldHaveBlockType : true,\r\n                        usesColors: buttonType.usesColors\r\n                    }\r\n                }\r\n                return true\r\n            } else {\r\n                return buttonType.children.some((buttonChild) => {\r\n                    if (buttonChild.type === type) {\r\n                        button = {\r\n                            button: {\r\n                                label: buttonChild.label,\r\n                                classes: buttonType.classes + \" \" + buttonChild.classes,\r\n                                variations: buttonChild.variations ? buttonChild.variations : []\r\n                            },\r\n                            type: {\r\n                                name: buttonType.label,\r\n                                shouldHaveRoundedType: buttonChild.shouldHaveRoundedType !== undefined ? buttonChild.shouldHaveRoundedType : true,\r\n                                shouldHaveBlockType: buttonChild.shouldHaveBlockType !== undefined ? buttonChild.shouldHaveBlockType : true,\r\n                                usesColors: buttonChild.usesColors\r\n                            }\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"examples\">\r\n            <Common activePage=\"examples\" pageTitle=\"Examples\" showMenuButton={true}>\r\n                <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.14.0/css/all.css\" integrity=\"sha384-HzLeBuhoNPvSl5KYnjx0BT+WB0QEEqLprO+NBkkk5gbc67FTaL7XIGa2w1L0Xbgc\" crossorigin=\"anonymous\" />\r\n            </Common>\r\n            <div className=\"flex mt-5\">\r\n                <Sidebar>\r\n                    {buttons.map((buttonType, index) => {\r\n                        if (!buttonType.children.length) {\r\n                            return <SidebarLink to={`#${buttonType.type}`} text={buttonType.label} \r\n                                key={`${buttonType.type}_${index}`} clickCallback={setCurrentButton}\r\n                                current={currentButton} />\r\n                        } else {\r\n                            return (\r\n                                <div key={`${buttonType.type}_${index}`}>\r\n                                    <SidebarLink to={`#${buttonType.type}`} text={buttonType.label} \r\n                                        key={`${buttonType.type}_${index}`} />\r\n                                    {buttonType.children.map((button, buttonIndex) => (\r\n                                        <SidebarLink to={`#${button.type}`} text={button.label} level={1} \r\n                                            key={`${index}_${buttonIndex}`} clickCallback={setCurrentButton}\r\n                                            current={currentButton} />\r\n                                    ))}\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </Sidebar>\r\n                <div className=\"container content lg:pr-20 md:w-8/12 pl-3\">\r\n                    <h1 className=\"text-4xl mb-7\">{button && button.button.label}</h1>\r\n                    {button && button.variations && button.variations.length && button.variations.map((variation) => (\r\n                        <ButtonExample button={{label: variation.label, classes: `${button.classes} ${variation.classes}`}}\r\n                            type={button.type} />\r\n                    ))}\r\n                    {button && (!button.variations || !button.variations.length) && \r\n                        <ButtonExample button={button.button} type={button.type} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Examples"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AANA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AANA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAtBA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAsCA;AACA;AAtGA;AACA;AADA;AAuGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}