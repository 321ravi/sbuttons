{"version":3,"file":"main.2360179dc3a5087be47d.hot-update.js","sources":["C:/Me/Web Development/sbuttons/website/src/components/ButtonExample.js","C:/Me/Web Development/sbuttons/website/src/components/ButtonSection.js","C:/Me/Web Development/sbuttons/website/src/pages/Examples/index.js"],"sourcesContent":["import React from 'react' \r\nimport ButtonSection from './ButtonSection'\r\n\r\nfunction ButtonExample ({button: {label, classes}, type: {name, shouldHaveRoundedType, shouldHaveBlockType}}) {\r\n\r\n    return (\r\n        <div className=\"button-example-container\">\r\n            <h3>{label}</h3>\r\n            <h4>Type: {name}</h4>\r\n            <ButtonSection title=\"Basic\" classes={classes} />\r\n            { shouldHaveRoundedType && \r\n                <ButtonSection title=\"Rounded\" classes={`${classes} rounded-btn`} />\r\n            }\r\n            { shouldHaveBlockType && \r\n                <ButtonSection title=\"Block\" classes={`${classes} block-btn`} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonExample","import React from 'react' \r\nimport CopyToClipboard from 'react-copy-to-clipboard'\r\nimport { toast } from 'react-toastify'\r\nimport { FiCopy } from 'react-icons/fi'\r\nimport buttonColors from '../data/button-colors.json'\r\n\r\nfunction ButtonSection ({title, classes}) {\r\n    function getCopyClasses(classes) {\r\n        return \".\" + classes.replaceAll(new RegExp(\"/\\\\s/\"), \".\")\r\n    }\r\n\r\n    function showToast () {\r\n        toast.success('Copied!', {\r\n            className: 'dark:bg-gray-800',\r\n            position: \"top-right\",\r\n            autoClose: 3000,\r\n            hideProgressBar: false,\r\n            closeOnClick: false,\r\n            pauseOnHover: false,\r\n            draggable: false,\r\n            progress: undefined,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <h5>{title}</h5>\r\n            <div className=\"flex flex-row flex-wrap\">\r\n                {buttonColors.map((color, index) => {\r\n                    const buttonClasses = `${classes} ${color}`,\r\n                        copyClasses = getCopyClasses(buttonClasses)\r\n                    return (\r\n                        <div className=\"pr-5 pb-5\" key={index}>\r\n                            <button className={`${classes} ${color}`}>\r\n                                Button\r\n                            </button>\r\n                            <CopyToClipboard text={copyClasses} onCopy={showToast}>\r\n                                <span className=\"text-sm text-gray-500\">\r\n                                    {copyClasses}\r\n                                    <FiCopy className=\"pl-3\" />\r\n                                </span>\r\n                            </CopyToClipboard>\r\n                        </div>\r\n                )})}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ButtonSection","import React, { useEffect, useState } from 'react' \r\nimport Common from '../Common'\r\nimport Sidebar from '../../components/Sidebar'\r\nimport SidebarLink from '../../components/SidebarLink'\r\nimport buttons from '../../data/buttons.json'\r\nimport ButtonExample from '../../components/ButtonExample'\r\n\r\nfunction Examples () {\r\n    const [currentButton, setCurrentButton] = useState(null)\r\n\r\n    useEffect(() => {\r\n        //todo set currentbutton intial value\r\n        if (window.location.hash) {\r\n            setCurrentButton(window.location.hash)\r\n        } else {\r\n            if (buttons.length) {\r\n                //set the first button as current button\r\n                if (buttons[0].children.length) {\r\n                    setCurrentButton('#' + buttons[0].children[0].type)\r\n                } else {\r\n                    setCurrentButton('#' + buttons[0].type)\r\n                }\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    let button = null\r\n    if (currentButton) {\r\n        const type = currentButton.replace(\"#\", \"\")\r\n        buttons.some((buttonType) => {\r\n            if (buttonType.type === type) {\r\n                button = {\r\n                    button: {\r\n                        label: buttonType.label,\r\n                        classes: buttonType.classes\r\n                    },\r\n                    type: {\r\n                        name: buttonType.name,\r\n                        shouldHaveRoundedType: buttonType.shouldHaveRoundedType,\r\n                        shouldHaveBlockType: buttonType.shouldHaveBlockType\r\n                    }\r\n                }\r\n                return true\r\n            } else {\r\n                buttonType.children.some((buttonChild) => {\r\n                    if (buttonChild.type === type) {\r\n                        button = {\r\n                            button: {\r\n                                label: buttonChild.label,\r\n                                classes: buttonChild.classes\r\n                            },\r\n                            type: {\r\n                                name: buttonType.name,\r\n                                shouldHaveRoundedType: buttonType.shouldHaveRoundedType,\r\n                                shouldHaveBlockType: buttonType.shouldHaveBlockType\r\n                            }\r\n                        }\r\n                        return true\r\n                    }\r\n                })\r\n            }\r\n            return false\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"examples\">\r\n            <Common activePage=\"examples\" pageTitle=\"Documentation\" showMenuButton={true}>\r\n                <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.14.0/css/all.css\" integrity=\"sha384-HzLeBuhoNPvSl5KYnjx0BT+WB0QEEqLprO+NBkkk5gbc67FTaL7XIGa2w1L0Xbgc\" crossorigin=\"anonymous\" />\r\n            </Common>\r\n            <div className=\"flex mt-5\">\r\n                <Sidebar>\r\n                    {buttons.map((buttonType, index) => {\r\n                        if (!buttonType.children.length) {\r\n                            return <SidebarLink to={`#${buttonType.type}`} text={buttonType.label} \r\n                                key={`${buttonType.type}_${index}`} clickCallback={setCurrentButton} />\r\n                        } else {\r\n                            return (\r\n                                <div>\r\n                                    <SidebarLink to={`#${buttonType.type}`} text={buttonType.label} \r\n                                        key={`${buttonType.type}_${index}`} />\r\n                                    {buttonType.children.map((button, buttonIndex) => (\r\n                                        <SidebarLink to={`#${button.type}`} text={button.label} level={1} \r\n                                            key={`${index}_${buttonIndex}`} clickCallback={setCurrentButton} />\r\n                                    ))}\r\n                                </div>\r\n                            )\r\n                        }\r\n                    })}\r\n                </Sidebar>\r\n                <div className=\"container content lg:pr-20 md:w-8/12 pl-3\">\r\n                    <h2 className=\"text-4xl mb-7\">Examples</h2>\r\n                    {button && <ButtonExample button={button.button} type={button.type} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Examples"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAhBA;AAiBA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAWA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AA1CA;AA2CA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AALA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AApBA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AA3FA;AACA;AADA;AA4FA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}